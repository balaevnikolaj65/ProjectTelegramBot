from aiogram import Bot, Dispatcher, executor, types
from fonk import *
from keyboard import *
from config import *


bot = Bot(token=TOKEN_API)
dp = Dispatcher(bot=bot)

horoscopes = {
    '–∫–æ–∑–æ—Ä—ñ–≥‚ôë': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ö–æ–∑–æ—Ä–æ–≥–∞ –Ω–∞ 2024: {capricorn}',
    '–≤–æ–¥–æ–ª—ñ–π‚ôí': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –í–æ–¥–æ–ª—ñ—è –Ω–∞ 2024: {aquarius}',
    '—Ä–∏–±–∏‚ôì': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –†–∏–± –Ω–∞ 2024: {pisces}',
    '–æ–≤–µ–Ω‚ôà': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –û–≤–Ω–∞ –Ω–∞ 2024: {aries}',
    '—Ç–µ–ª–µ—Ü—å‚ôâ': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –¢–µ–ª—å—Ü—è –Ω–∞ 2024: {taurus}',
    '–±–ª–∏–∑–Ω—é–∫–∏‚ôä': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ë–ª–∏–∑–Ω—é–∫—ñ–≤ –Ω–∞ 2024: {gemini}',
    '—Ä–∞–∫‚ôã': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –†–∞–∫–∞ –Ω–∞ 2024: {cancer}',
    '–ª–µ–≤‚ôå': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –õ–µ–≤–∞ –Ω–∞ 2024: {leo}',
    '–¥—ñ–≤–∞‚ôç': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –î—ñ–≤–∏ –Ω–∞ 2024: {virgo}',
    '—Ç–µ—Ä–µ–∑–∏‚ôé': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –¢–µ—Ä–µ–∑ –Ω–∞ 2024: {libra}',
    '—Å–∫–æ—Ä–ø—ñ–æ–Ω‚ôè': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –°–∫–æ—Ä–ø—ñ–æ–Ω–∞ –Ω–∞ 2024: {scorpio}',
    '—Å—Ç—Ä—ñ–ª–µ—Ü—å‚ôê': f'–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –°—Ç—Ä—ñ–ª—å—Ü—è –Ω–∞ 2024: {sagittarius}',
}

@dp.message_handler(commands=['start'])
async def start_hello(message: types.Message):
    await message.answer(text=START_HELLO, reply_markup=start_menu_list)


@dp.message_handler(commands=['menu'])
@dp.message_handler(text='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é')
async def get_menu(message: types.Message):
    await message.answer(text=MENU, reply_markup=start_menu_list)


@dp.message_handler(text=['–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É üåü', '–©–µ —Ä–∞–∑'])
async def find_zz(message: types.Message):
    await message.answer(text=FIND)


@dp.message_handler(text='–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤—ñ–π –≥–æ—Ä–æ—Å–∫–æ–ø üîÆ')
async def get_horoscope(message: types.Message):
    await message.answer(text="–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ —Å–≤—ñ–π –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É.",
                         reply_markup=stage1)


@dp.message_handler(text='–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å üíû')
async def compatibility_zs(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    url_button = InlineKeyboardButton(text="–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –Ω–∞ –¥–æ–ª—é", url="https://testometrika.com/funny/zodiac-compatibility-test/")
    keyboard.add(url_button)
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å:",
                         reply_markup=keyboard)


@dp.message_handler()
async def handle_message(message: types.Message):
    data = message.text
    if len(data) == 5:
        result = zodiac_find(message.text)
        await message.answer(text=(f'–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥—ñ–∞–∫—É - {result}'),
                             reply_markup=find_list)
    elif message.text in horoscopes:
        horoscope_text = horoscopes[message.text]
        await message.answer(horoscope_text,
                             reply_markup=select_list)
    else:
        await message.answer(text=FAULT)


@dp.message_handler(text='–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å üíû')
async def compatibility_zs(message: types.Message):
    await message.answer(text=COMPATIBILITY)


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp,
                           skip_updates=True,
                           allowed_updates=["message", "inline_query", "callback_query"])